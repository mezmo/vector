---
apiVersion: "deploy.razee.io/v1alpha2"
kind: MustacheTemplate
metadata:
  name: vector
  namespace: pipeline
  labels:
    app: vector
    razee/watch-resource: "lite"
    deploy.razee.io/Reconcile: 'false'
  annotations:
    razee.io/git-repo: "${GIT_URL}"
    razee.io/commit-sha: "${GIT_SHA1}"
    razee.io/build-url: "${BUILD_URL}"
    razee.io/branch: "${GIT_BRANCH}"
spec:
  env:

    - name: vector-partitions
      optional: true
      default: |
        [{
          "partition-id": "gen0",
          "requests-cpu": 1,
          "requests-memory": "2Gi",
          "requests-storage": "10Gi",
          "storage-class": "gp3-us-east-1a",
          "limits-cpu": 8,
          "limits-memory": "16Gi",
          "min-replicas": 2,
          "max-replicas": 8
        }]
      valueFrom:
        configMapKeyRef:
          namespace: pipeline
          name: vector-partitions
          key: vector-partitions
          type: json

    - name: mezmo_reshape_message
      optional: true
      default: '0'
      valueFrom:
        configMapKeyRef:
          name: pipeline-env-config
          namespace: pipeline
          key: reshape-message-in-vector

    - name: config_reload_max_sec
      optional: true
      default: '150'
      valueFrom:
        configMapKeyRef:
          name: vector
          namespace: pipeline
          key: config-reload-max-sec

    - name: config_reduce_byte_threshold_per_state
      optional: true
      valueFrom:
        configMapKeyRef:
          name: vector
          namespace: pipeline
          key: config-reduce-byte-threshold-per-state

    - name: config_reduce_byte_threshold_all_states
      optional: true
      valueFrom:
        configMapKeyRef:
          name: vector
          namespace: pipeline
          key: config-reduce-byte-threshold-all-states

  strTemplates:
  - |

    apiVersion: v1
    kind: List
    items:
    {{#vector-partitions}}
    - apiVersion: v1
      kind: Service
      metadata:
        name: vector-{{partition-id}}
        namespace: pipeline
        labels:
          deploy.razee.io/Reconcile: 'false'
          deploy.razee.io/mode: 'StrategicMergePatch'
          app: vector
          partition: {{partition-id}}
          version: "${APP_VERSION}"
      spec:
        clusterIP: None
        selector:
          app: vector
          partition: {{partition-id}}
        ports:
          - name: vector-graphql-api
            protocol: TCP
            port: 8686
            targetPort: 8686

    - apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: vector-{{partition-id}}
        namespace: pipeline
        labels:
          app: vector
          partition: {{partition-id}}
          version: "${APP_VERSION}"
      spec:
        serviceName: vector-{{partition-id}}
        podManagementPolicy: "OrderedReady"
        selector:
          matchLabels:
            app: vector
            partition: {{partition-id}}
        template:
          metadata:
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/path: "/metrics"
              prometheus.io/port: "9598"
            labels:
              app: vector
              partition: {{partition-id}}
          spec:
            containers:
              - name: vector
                image: "us.gcr.io/logdna-k8s/vector:${APP_VERSION}"
                imagePullPolicy: IfNotPresent
                env:
                - name: PARTITION_NAME
                  value: {{partition-id}}

                - name: VECTOR_LOG
                  valueFrom:
                    configMapKeyRef:
                      name: vector
                      key: loglevel
                      optional: true

                - name: _RJEM_MALLOC_CONF
                  valueFrom:
                    configMapKeyRef:
                      name: vector
                      key: malloc-conf
                      optional: true

                - name: ALLOCATION_TRACING
                  valueFrom:
                    configMapKeyRef:
                      name: vector
                      key: allocation-tracing
                      optional: true

                - name: ALLOCATION_TRACING_REPORTING_INTERVAL_MS
                  valueFrom:
                    configMapKeyRef:
                      name: vector
                      key: allocation-tracing-reporting-interval-ms
                      optional: true

                - name: PIPELINE_SERVICE_CONTROL_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: pipeline
                      key: vector-control-token

                - name: MEZMO_METRICS_DB_URL
                  valueFrom:
                    secretKeyRef:
                      name: pipeline-pguser-metrics
                      key: uri

                - name: USAGE_METRICS_PROFILE_ENABLED
                  valueFrom:
                    configMapKeyRef:
                      name: pipeline-env-config
                      key: usage-metrics-profile-enabled
                      optional: true

                - name: USAGE_METRICS_PROFILE_FLUSH_INTERVAL_SECS
                  valueFrom:
                    configMapKeyRef:
                      name: pipeline-env-config
                      key: usage-metrics-profile-flush-interval-secs
                      optional: true

                - name: MEZMO_PIPELINE_DB_URL
                  valueFrom:
                    secretKeyRef:
                      name: pipeline-pguser-pipeline
                      key: uri

                - name: POD_NAME # This is what vector uses as the pod name
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name

                - name: MEZMO_RESHAPE_MESSAGE
                  value: "{{{mezmo_reshape_message}}}"

                - name: CONFIG_RELOAD_MAX_SEC
                  value: "{{{config_reload_max_sec}}}"

                - name: REDUCE_BYTE_THRESHOLD_PER_STATE
                  value: "{{{config_reduce_byte_threshold_per_state}}}"

                - name: REDUCE_BYTE_THRESHOLD_ALL_STATES
                  value: "{{{config_reduce_byte_threshold_all_states}}}"

                args:
                  - --config-dir
                  - /etc/vector/
                startupProbe:
                  timeoutSeconds: 5
                  httpGet:
                    path: /health
                    port: 8686
                  periodSeconds: 10
                  failureThreshold: 18
                resources:
                  requests:
                    memory: "{{{requests-memory}}}"
                    cpu: "{{{requests-cpu}}}"
                  limits:
                    memory: "{{{limits-memory}}}"
                    cpu: "{{{limits-cpu}}}"
                volumeMounts:
                  - name: data
                    mountPath: "/data/vector"
                  - name: vector-component-state
                    mountPath: "/data/component-state"
                  - name: config
                    mountPath: "/etc/vector/"
                    readOnly: true
            terminationGracePeriodSeconds: 60
            volumes:
              - name: data
                emptyDir: {}
              - name: config
                projected:
                  sources:
                    - configMap:
                        name: vector
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - key: workload-pipeline
                      operator: In
                      values:
                      - enabled
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  podAffinityTerm:
                    topologyKey: "kubernetes.io/hostname"
                    labelSelector:
                      matchExpressions:
                      - key: partition
                        operator: In
                        values:
                        - {{partition-id}}
            tolerations:
            - effect: NoSchedule
              key: workload-pipeline
              operator: Equal
              value: enabled

        volumeClaimTemplates:
        - metadata:
            name: vector-component-state
            annotations:
              volume.beta.kubernetes.io/storage-class: "{{{storage-class}}}"
            labels:
              app: vector
              partition: "{{{partition-id}}}"
          spec:
            accessModes:
            - ReadWriteOnce
            storageClassName: "{{{storage-class}}}"
            resources:
              requests:
                storage: "{{{requests-storage}}}"

    - apiVersion: autoscaling/v2
      kind: HorizontalPodAutoscaler
      metadata:
        name: vector-{{partition-id}}
        namespace: pipeline
      spec:
        minReplicas: {{{min-replicas}}}
        maxReplicas: {{{max-replicas}}}
        scaleTargetRef:
          apiVersion: apps/v1
          kind: StatefulSet
          name: vector-{{partition-id}}
        metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 600 # Goes from 100 to 800 (CPU 1 to 8)
        behavior:
          # Every 3 minutes, it can scale up 1 pod at a time if CPU stays above 600 for 1 minute
          scaleUp:
            stabilizationWindowSeconds: 180
            policies:
            - type: Pods
              value: 1
              periodSeconds: 60
          # Every 10 minutes, it can scale down 1 pod at a time if CPU stays below 600 for 1 minute
          scaleDown:
            stabilizationWindowSeconds: 600
            policies:
            - type: Pods
              value: 1
              periodSeconds: 60
    {{/vector-partitions}}
